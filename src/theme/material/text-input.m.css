/* The root class of TextInput */
.root {
	composes: ui ui-input ui-transition from './_ui.m.css';
	--label-color: var(--text-muted);
	--input-color: var(--text);
	--input-radius: var(--ui-border-radius-emphasized,2px) var(--ui-border-radius-emphasized,2px) 0 0;
	--ptb: 0px;
	color: var(--input-color,inherit);
	overflow: visible;
	outline: none;
	min-width: 0;
	margin-bottom: calc(var(--uiMB) - var(--line)) !important;
}
/*
.raised, .shaped, .filled {
	--ptb: var(--lineHalf, 8px);
}
*/
.root.raised, .root.shaped, .root.filled {
	padding-top: 0px;
	align-self: flex-end;
}
.root.raised, .root.shaped, .root.filled .input:focus {
	--label-color: var(--text-inverse-muted);
	--input-color: var(--text-inverse);
}
.raised .wrapper::before {
	content: "";
	position: absolute;
	height: calc(100% - var(--line));
	width: 100%;
	top: var(--line);
	border-radius: var(--input-radius);
	pointer-events: none;
}
.raised .wrapper::before {
	box-shadow: var(--ui-dp-2);
}
.root.responsive {
	/*display: flex;*/
	width: 100%;
}
/* The wrapper around the text input, label, leading, and trailing (not helper text) */
.wrapper {
	overflow: hidden;
}
/* Contains the input element */
.wrapper, .inputWrapper {
	width: 100%;
}
.inputWrapper {
	display: flex;
	min-height: var(--h);
	position: relative;
}
.raised .inputWrapper, .shaped .inputWrapper, .filled .inputWrapper {
	min-height: calc(var(--line2) - var(--pt));
}
.raised .input, .shaped .input, .filled .input {
	padding-top: var(--pt);
}
/* Added to the input */
.input {
	composes: input from './_typo.css';
	display: inline-block;
  min-width: 64px;
  max-width: 99.99% !important;
	min-height: 100%;
	width: 99.99%;
  transition: width 0.25s;
	padding: var(--ptb) var(--plr) var(--ptb) 4px;
	margin: 0;
	border: none;
}
.input:focus {
  outline: none;
}
.root .input {
	color: var(--t-input,var(--input-color),inherit);
	background: none;
}
.animated { }
.addonFilled { }
/* The bottom line, animated as pseudoelement ::after */
	/* composes: input-box from './_ui.m.css';
	top: auto;
	bottom: calc(var(--size) * var(--caph) - (var(--line) * 0.5)); */
.box {
	position: absolute;
	width: 100%;
	bottom: 0px;
	display: flex;
	height: 100%;
	z-index: -1;
	transition: border-color var(--ui-dpd-8) var(--ui-easing);
	line-height: 0;
}
.flat .box,
.filled .box,
.raised .box {
	border-radius: 0;
	border-top: 0;
	border-left: 0;
	border-right: 0;
	border-bottom: var(--ui-border-width-emphasized) solid var(--ui-outline);
}
.raised .box,
.raised:hover .box {
	border-top: var(--ui-border-width-emphasized) solid var(--ui-bg-inverse-hover);
}
.raised .box,
.shaped .box {
	border-width: var(--ui-border-width);
	border-radius: var(--input-radius);
	background-color: var(--ui-bg-inverse);
}
.filled .box {
	border-radius: var(--input-radius);
	background-color: var(--ui-filled);
}
.outlined .box {
	border: var(--ui-border-width-emphasized) solid var(--ui-outline);
	background-color: var(--paper);
}

.root:not(.disabled):not(.invalid) .input:hover:not(:focus):not(:invalid) ~ .box {
	border-color: var(--ui-border-hover);
}
.root:not(.disabled):not(.invalid).filled .input:hover:not(:focus):not(:invalid) ~ .box {
	border-color: var(--ui-border);
}
.root:not(.disabled):not(.invalid).raised .input:hover:not(:focus):not(:invalid) ~ .box {
	border-color: var(--ui-bg-inverse);
}
.raised:not(.disabled):not(.invalid) .input:focus:not(:invalid) ~ .box,
.filled:not(.disabled):not(.invalid) .input:focus:not(:invalid) ~ .box,
.shaped:not(.disabled):not(.invalid) .input:focus:not(:invalid) ~ .box {
	background-color: var(--ui-bg-inverse-hover);
}
.invalid .input ~ .box,
.input:invalid ~ .box {
	border-color: var(--ui-error) !important;
}

.box::after {
	transform: scaleX(0);
  pointer-events: none;
	border-color: var(--ui-accent);
	transition: transform var(--ui-dpd-6) var(--ui-easing) 0ms;
}

.root.flat .box::after,
.root.outlined .box::after {
	cursor: text;
	margin-top: var(--ui-border-width-emphasized);
}

.invalid .box::after,
.root:not(.disabled) .input:invalid + .box::after {
	transform: scaleX(1);
	border-color: var(--ui-error);
}
.root:not(.disabled) .input:focus + .box::after {
	transform: scaleX(1);
}


/* Added to a focused content */
.focusedContent {
	position: relative;
	z-index: 11;
	display: none;
}
.input:focus ~ .focusedContent {
	display: flex;
}

.label {
	--plr-inner: calc(var(--plr) * 0.382);
	position: absolute;
	left: 0;
	top: var(--above);
	display: inline-block;
	padding: var(--ptb) var(--plr-inner) 0 var(--plr-inner);
	margin-bottom: 0;
	cursor: text;
	text-overflow: ellipsis;
	white-space: nowrap;
	max-width: 100%;
	overflow: hidden;
	color: var(--gray, var(--label-color), #666);
	background-color: transparent;
	transform: translateX(var(--plr));
	transform-origin: top left;
	will-change: transform, top, line-height, color, background-color;
	transition-property: transform, top, color, background-color;
	transition-duration: var(--ui-dpd-0);
	transition-timing-function: var(--ui-easing);
}
.flat .label {
	transform: translateX(0);
}
.outlined .label,
.raised .label {
	--plr-inner: calc(var(--plr) * 0.382 + var(--ui-border-width));
}
.noLabel.slideLabel .label,
.noLabel.staticLabel .label {
	opacity: 0 !important;
}
/* sliding labels */
.slideLabel .input:focus ~ .label,
.slideLabel .input:not(:placeholder-shown) ~ .label {
	--label-color: var(--ui-accent);
	font-size: var(--size);
	color: var(--label-color);
	top: 0px;
	/* calc(var(--line) - var(--ptb) - 2px); */
	line-height: 1;
	overflow: visible;
}

.slideLabel:not(.outlined):not(.flat) .input:focus ~ .label,
.slideLabel:not(.outlined):not(.flat) .input:not(:placeholder-shown) ~ .label {
	transform: translateX(0) translateY(var(--pt));
}
.slideLabel.flat .input:focus ~ .label,
.slideLabel.flat .input:not(:placeholder-shown) ~ .label {
	transform: translateX(0) translateY(calc(var(--small-size) * -0.618));
}
.slideLabel.outlined .input:focus ~ .label,
.slideLabel.outlined .input:not(:placeholder-shown) ~ .label {
	transform: translateX(calc(var(--plr) * 0.618)) translateY(calc(var(--small-size) * -0.5));
}
.staticLabel { }

/*
.root:not(.flat) .label::after {
	content: "";
	display: inline-block;
	position: absolute;
	width: 100%;
	left: 0;
	background: var(--paper);
	z-index: -1;
}
.slideLabel:not(.flat) .label::after {
	will-change: transform;
	transform: scaleY(0);
}
.root:not(.flat):not(.outlined) .label::after {
	margin-top: calc((var(--small-size) - var(--size)) * 0.5);
	height: calc(var(--size) + var(--ui-border-width));
}
.outlined .label::after {
	margin-top: calc(var(--small-size) * 0.5 - 0.5px);
	height: calc(var(--ui-border-width-emphasized) + 0.5px);
}
.shaped .label::after {
	border-radius: 0 0 var(--ui-border-radius-emphasized) 0;
}
.slideLabel .input:focus ~ .label::after,
.slideLabel .input:not(:placeholder-shown) ~ .label::after {
	transform: scaleY(1);
	transition: transform 16ms linear calc(var(--ui-dpd-0) * 0.6);
}
*/

.slideLabel .input::placeholder {
	font-size: var(--small-size);
	padding-top: var(--pt);
	line-height: 1;
}
.slideLabel .input::placeholder,
.slideLabel .prefix,
.slideLabel .suffix {
	transition: opacity var(--ui-dpd-1) var(--ui-easing);
	opacity: 0;
}
.slideLabel .input:focus::placeholder,
.slideLabel .input:focus ~ .prefix,
.slideLabel .input:focus ~ .suffix,
.slideLabel .input:not(:placeholder-shown) ~ .prefix,
.slideLabel .input:not(:placeholder-shown) ~ .suffix {
	opacity: 1;
}

.invalid .input:focus ~ label,
.wrapper .input:invalid:focus ~ .label {
	color: var(--ui-error);
}

.disabled .input:not(:invalid) ~ .box {
	background-color: var(--ui-disabled) !important;
}
.disabled label {
	color: var(--ui-disabled) !important;
}
.required label::after {
	content: "*";
}
.required label::after,
.root div[pseudo="-webkit-textfield-decoration-container"] {
	color: var(--ui-error, red);
	text-align: right;
}
.required .input:empty,
.invalid .input,
.enabled .input:invalid {
	caret-color: var(--ui-error, red);
}



/*
.hasSchema .input:focus ~ .label {
	color: var(--ui-bg);
}
.parentSchema .input:focus ~ .label {
	color: var(--ui-accent);
}

.filled .box,
.outlined .box {
	content: "";
	display: block;
	position: absolute;
	bottom: 0;
	left: 0;
	width: 100%;
	z-index: -1;
}
.filled .box {
	height: calc(var(--ui-outer-h) - var(--input-border-distance) + var(--ui-lr));
	border-radius: var(--ui-border-radius-emphasized) var(--ui-border-radius-emphasized) 0 0;
	background: var(--input-fill);
}
.outlined .box {
	height: calc(var(--size) * var(--lh) - (var(--line) - var(--size)));
	border-radius: var(--ui-border-radius-emphasized);
	border: var(--ui-border-width) solid var(--ui-outline);
}
.outlined .input:focus ~ .box {
	border-width: var(--ui-border-width-emphasized);
}
.root:not(.responsive):not(.number)::after,
.root:not(.responsive):not(.number) .wrapper {
	width: var(--ui-default-input-width);
}
.outlined.invalid .box,
.outlined:not(.disabled) .input:invalid ~ .box {
	border-color: var(--ui-error);
}
*/

.noLabel {
}

/* Added to a disabled TextInput */
.disabled {
}
/* Added to a focused input */
.focused {
}
/* Added to a read-only input */
.readonly {
}
/* Added to a required input */
.required {
}
/* Added when the contents of the TextInput are invalid */
.invalid {
}
/* Contains leading content */
.addonRoot {
}
/* Added at the root when there is leading content */
.hasLeading {
}

/* Added at the root when there is trailing content */
.hasTrailing {
}
.helperText {
}
/* Styles the helper text when the input is invalid */
.invalid .helperText {
	color: var(--ui-error, red);
}

/* Styles the input when the input is invalid */
.invalid .input {
	border-color: var(--ui-error, red);
}

/* Styles the input when the input is valid */
.valid .input {
	border-color: var(--success-color);
}
