/* TODO
- multistate
outline,draft / revision / edit / proofreading /
published

[[view+]]
[[av+]] play/pause etc
[[licences like copyright]] ?

lightdark, colorswitch
error, warning

TT
translateX(100%) rotate(90deg);
translateX(-100%);

100
200
*/
.root {
	composes: root normal radio from './radio.m.css';
	--root-inner: var(--ui-colored-inner, #fff);
	--r-bw: var(--ui-border-width-emphasized, 2px);
	--r-w: 61.8%;
	--r-l: 19.1%;
	--r-t: calc(50% - (var(--r-bw) / 2));
	--r-border: var(--r-bw) solid var(--ui-border, #CCC);
	--r-t-arrow: scaleX(0.1) translateX(calc(-100% - var(--r-bw)));
	--r-t-constraint: rotate(45deg) scale(0.5) translate(calc(-100% + var(--r-bw)), calc(100% - var(--r-bw)));
	--r-bg: none;
	--r-transform: none;
	--r-c-before: "";
	--r-c-after: "";
	color: var(--text);
	user-select: none;
	cursor: pointer;
	overflow: hidden;
}
.root.close {
	margin-right: calc(var(--line2) - var(--ui-inner-h));
}

.minimize .inner, .minmax, .maximize, .maxmin, .moreHorizontal, .moreVertical, .close {
	--r-bg: var(--ui-border, #CCC);
}
.state, .todo, .moreHorizontal, .moreVertical, .bookmark {
	--r-c-before: none;
	--r-c-after: none;
}
.enabled { composes: enabled from './radio.m.css'; }
.disabled { composes: disabled from './radio.m.css'; }
.inner { composes: inner from './radio.m.css'; }
.enabled .inner {
	background: var(--root-inner, transparent) !important;
}
.disabled .inner,
.enabled .inner {
	--r-dist: calc((var(--spacing) / 2));
	margin: 0 var(--ui-lr) 0 var(--ui-lr) !important;
	align-self: flex-end !important;
}
.inner::before, .inner::after {
	content: none;
}
.bookmark .inner, .star .inner {
	--r-color: var(--ui-border, grey);
	color: var(--r-color);
}
/* flex order */
.title { order: -1; }
.maximize { order: 91; }
.maxmin { order: 92; }
.minimize { order: 94; }
.minmax { order: 95; }
.close { order: 99; }
.blank, .end {
	flex-basis: calc(var(--line) - var(--padding-top) * 2);
}
.end {
	order: 100;
	height: var(--ui-inner-h, 16px);
}
.meta, .settings, .content {
	transition: visibility 0s, height 0s,
	opacity var(--ui-dpd-6) var(--ui-easing), transform var(--ui-dpd-6) var(--ui-easing);
}
.meta, .settings {
	visibility: hidden;
	pointer-events: none;
	flex-basis: 100%;
	order: 150;
	height: 0;
	top: 0;
  right: 0;
	overflow: hidden;
}
.settings {
	transform: scaleY(0);
}
.content {
	flex-basis: 100%;
	order: 200;
}

/* special colors */
.settingsToggle { composes: settings from './_color.m.css'; }
.close, .error { composes: error from './_color.m.css'; }
.minimize, .minmax, .warning { composes: warning from './_color.m.css'; }
.maximize, .maxmin, .success { composes: success from './_color.m.css'; }
.moreHorizontal, .moreVertical, .metaToggle, .language {
	composes: info from './_color.m.css';
}
.levelUp, .enter, .tl, .arrow, .star, .bookmark, .state, .todo {
	composes: neutral from './_color.m.css';
}

.icon, .icon::before, .icon::after {
	transition: transform var(--ui-dpd-6) var(--ui-easing);
}
.icon::before, .icon::after {
  position: absolute;
	border-radius: 0;
  width: var(--r-w);
  height: var(--r-bw);
  left: var(--r-l);
  top: var(--r-t);
  margin: 0;
	opacity: 1;
	background: var(--r-bg);
}
.icon::before { content: var(--r-c-before); }
.icon::after { content: var(--r-c-after); }

.arrow .icon::before, .state .icon::before,
.arrows .icon::before, .arrows .icon::after {
	width: 43.7%;
	height: 43.7%;
	top: 28.15%;
	transform: rotate(45deg);
}
.state .icon::before,
.arrow .icon::before, .arrows .icon::before {
	left: var(--r-bw);
	border-bottom: var(--r-border);
	border-left: var(--r-border);
}
.arrow .icon::after, .arrows .icon::after {
	left: auto;
	right: var(--r-bw);
	border-top: var(--r-border);
	border-right: var(--r-border);
}
.constraint .icon::before {
	transform: translateX(calc(var(--r-bw) * 3)) rotate(45deg);
}
.constraint .icon::after {
	top: var(--r-l);
	left: calc(var(--r-bw) * 2);
	height: var(--r-w);
	width: var(--r-bw);
	border: none;
	background: var(--ui-border, #CCC);
}
.moreHorizontal .icon, .moreVertical .icon {
	width: 20%;
	height: 20%;
	top: 40%;
	left: 40%;
	border-radius: 50%;
	background: var(--r-bg);
	box-shadow: 0px -.375em 0px 0 var(--ui-accent), 0px .375em 0px 0 var(--ui-accent);
}
.bookmark .icon {
	--w: calc(var(--ui-inner-h) / 7);
	--w2: calc(var(--w) * 1.75);
	width: 0;
	height: 0;
	border: var(--w2) solid;
	border-bottom-color: transparent;
	border-radius: var(--r-bw) var(--r-bw) 0 0;
	box-shadow: 0 calc(var(--w) * -1);
	transform: translateY(var(--r-bw)) scaleY(1);
}

.root.state .inner {
	border-left-color: transparent;
}
.state .icon,
.todo .icon {
	position: absolute;
	width: var(--r-bw);
	height: 43.7%;
	transform: translateX(0%) rotate(-90deg);
	border-left: var(--r-border);
	border-bottom: var(--r-border);
	transition: transform, width var(--ui-dpd-6) var(--ui-easing);
}
.state .icon {
	left: var(--r-bw);
}
.todo .icon {
	left: 50%;
}
.language .icon::before {
	border-left: var(--r-border);
	border-right: var(--r-border);
	border-radius: 50%;
  width: 50%;
  height: 100%;
  left: 25%;
  top: 0;
}
.language .icon::after {
	border-top: var(--r-border);
	border-bottom: var(--r-border);
	border-radius: var(--r-bw);
  width: 100%;
  height: 38.2%;
  left: 0;
  top: 30.9%;
}
.star .icon, .star .icon::before, .star .icon::after, .language .icon::before {
	transition: all var(--ui-dpd-6) var(--ui-easing);
}
.back, .forward, .up, .down { composes: arrow; }
.first, .last { composes: arrow constraint; }
.metaToggle, .levelUp, .enter, .tl { composes: arrows; }
.back .icon::before, .forward .icon::before, .up .icon::before, .down .icon::before {
	left: calc(var(--r-bw) * 2);
}
.settingsToggle .inner {
	transition: transform var(--ui-dpd-8) var(--ui-easing);
	border: 3px dotted var(--ui-border, #CCC) !important;
}
.settingsToggle .icon::before,
.settingsToggle .icon::after {
	border-radius: 50%;
	left: 50%;
	top: 50%;
	transform: translate(-50%,-50%);
	background: none !important;
}
.settingsToggle .icon::before {
	width: 100%;
	height: 100%;
	border: var(--r-border) !important;
	background: #fff;
}
.settingsToggle .icon::after {
	width: 50%;
	height: 50%;
	border: var(--r-border) !important;
}
.star .icon { /* TODO baseline - see controls without flex */
	--h: calc(var(--ui-inner-h) / 3);
	color: var(--r-color);
  position: relative;
  transform: rotate(35deg);
}
.star .icon, .star .icon::before, .star .icon::after {
	content: '';
	display: block;
	width: 0px;
	height: 0px;
}
.star .icon, .star .icon::after {
	border-right: var(--h) solid transparent;
	border-bottom: calc(var(--h) * 0.7) solid;
	border-left: var(--h) solid transparent;
}
.star .icon::before {
  border-bottom: calc(var(--h) * 0.8) solid;
  border-left: calc(var(--h) * 0.3) solid transparent;
  border-right: calc(var(--h) * 0.3) solid transparent;
  position: absolute;
  top: calc(var(--h) * -0.45);
  left: calc(var(--h) * -0.65);
  transform: rotate(-35deg);
}
.star .icon::after {
  position: absolute;
  top: 0;
  left: calc(var(--h) * -1.02);
  transform: rotate(-70deg);
}

.control {
	visibility: hidden;
	position: absolute;
	top: -4000px;
}
.control.close:checked ~ .content,
.control.minimize:checked ~ .content,
.control.minmax:checked ~ .content {
	height: 0;
	margin: 0;
	padding: 0;
}
.control.maximize:checked ~ .content,
.control.maxmin:checked ~ .content {
	margin-top: calc(var(--line2, 32px) + var(--padding-top));
}
.control.close:checked ~ .root,
.control.close:checked ~ .title,
.control.close:checked ~ .control {
	overflow: hidden;
	transform: scale(0) !important;
	padding: 0;
	margin: 0;
	height: 0;
}

.control.minimize:checked ~ .container,
.control.minmax:checked ~ .container {
	overflow: hidden;
	height: var(--line3, 48px);
	padding-top: 0;
	padding-bottom: 0;
}
.control.metaToggle:checked ~ .meta,
.control.maximize:checked ~ .container,
.control.maxmin:checked ~ .container {
	margin: 0;
	position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
}
.control.metaToggle:checked ~ .meta {
	height: 100%;
	pointer-events: auto;
	visibility: visible;
	overflow: auto;
	margin-top: var(--line2, 32px);
	z-index: 3;
}
.control.metaToggle:checked ~ .content {
	opacity: 0;
	pointer-events: none;
}
.control.settingsToggle:checked ~ .settings,
.control.settingsToggle:checked ~ * .settings {
	height: auto;
	pointer-events: auto;
	visibility: visible;
	transform: scaleY(1);
}

.control.maximize:checked ~ .container,
.control.maxmin:checked ~ .container {
	z-index: var(--z-index-dialog, 400);
	left: 0;
}
.control.maximize:checked ~ .control.metaToggle:checked ~ .meta,
.control.maxmin:checked ~ .control.metaToggle:checked ~ .meta {
	z-index: calc(var(--z-index-dialog, 400) + 1);
}

.forward .inner, .last .inner { transform: rotate(180deg); }
.moreVertical .inner, .up .inner { transform: rotate(90deg); }
.down .inner, .enter .inner { transform: rotate(-90deg); }
.close .icon::before { transform: rotate(45deg); }
.close .icon::after { transform: rotate(-45deg); }
.levelUp .icon::before, .enter .icon::before { transform: translate(75%, 25%); }
.levelUp .icon::after, .enter .icon::after { transform: rotate(-45deg) translate(-25%, -25%); }
.tl .icon::before { transform: translateX(100%); }
.tl .icon::after { transform: translateX(-100%); }

/* ICON animations */
.control.maximize + .maximize .icon::before,
.control.minmax:checked + .minmax .icon::before,
.control.maxmin:not(.control:checked) + .maxmin .icon::before {
  transform: rotate(90deg);
}
.control.metaToggle:checked + .metaToggle .icon::before {
	transform: rotate(45deg) translate(calc(100% - 0.5px), calc(-100% + 0.5px));
}
.control.metaToggle:checked + .metaToggle .icon::after {
	transform: rotate(45deg) translate(calc(-100% + 0.5px), calc(100% - 0.5px));
}
.control.bookmark:checked + .bookmark .icon {
	transform: translateY(50%) scaleY(1.25);
	box-shadow: 0 calc(var(--w) * -2);
}
.control.star:checked + .star .icon {
	transform: rotate(35deg) scale(1.3333, 1.3333);
}
.control.todo:checked + .todo .icon {
	width: 72%;
	transform: translateX(-50%) rotate(-61.8deg);
}
.control.settingsToggle:checked + .settingsToggle .inner {
	transform: rotate(360deg);
}
.control.todo:checked + .todo .inner,
.control.star:checked + .star .inner,
.control.bookmark:checked + .bookmark .inner {
	--r-color: var(--ui-success, lime);
}
.control.star:checked + .star .icon {
	--r-color: var(--r-pink, red);
}
.control.todo:checked + .todo .inner,
.control.bookmark:checked + .bookmark .inner,
.control.star:checked + .star .inner {
	border-color: var(--r-color);
	border-bottom-color: transparent;
	border-width: var(--r-bw);
	border-style: dotted;
}
.control.todo:checked + .todo .icon {
	border-color: var(--r-color);
}
.control.language:checked + .language .icon::before {
	border-radius: 0% 100% 100% 0%;
	transform: translateX(25%);
}
@keyframes arrowschecked {
	0% { transform: none; } 80% { transform: var(--r-t-arrow); } 100% { transform: none; }
}
@keyframes arrowsunchecked {
	0% { transform: none; } 80% { transform: var(--r-t-arrow); } 100% { transform: none; }
}
@keyframes constraintschecked {
	0% { transform: rotate(45deg); } 80% { transform: var(--r-t-constraint); } 100% { transform: rotate(45deg); }
}
@keyframes constraintsunchecked {
	0% { transform: none; } 80% { transform: var(--r-t-constraint); } 100% { transform: none; }
}
@keyframes morechecked {
	0% { transform: scale(1) translate(0,0); }
	50% { transform: scale(1.25) translate(0,75%); }
	50.1% { transform: scale(1.25) translate(0,-75%); }
	100% { transform: scale(1) translate(0,0); }
}
@keyframes moreunchecked {
	0% { transform: scale(1) translate(0,0); }
	50% { transform: scale(1.25) translate(0,75%); }
	50.1% { transform: scale(1.25) translate(0,-75%); }
	100% { transform: scale(1) translate(0,0); }
}
.control.back:checked + .back .icon::after,
.control.forward:checked + .forward .icon::after,
.control.up:checked + .up .icon::after,
.control.down:checked + .down .icon::after {
	animation: arrowschecked var(--ui-dpd-8) var(--ui-easing);
}
.control.back:not(.back:checked) + .back .icon::after,
.control.forward:not(.forward:checked) + .forward .icon::after,
.control.up:not(.up:checked) + .up .icon::after,
.control.down:not(.down:checked) + .down .icon::after {
	animation: arrowsunchecked var(--ui-dpd-8) var(--ui-easing);
}
.control.first:checked + .first .icon::before,
.control.last:checked + .last .icon::before {
	animation: constraintschecked var(--ui-dpd-8) var(--ui-easing);
}
.control.first:not(.first:checked) + .first .icon::before,
.control.last:not(.last:checked) + .last .icon::before {
	animation: constraintsunchecked var(--ui-dpd-8) var(--ui-easing);
}
.control.moreHorizontal:checked + .moreHorizontal .icon,
.control.moreVertical:checked + .moreVertical .icon {
	animation: morechecked var(--ui-dpd-8) var(--ui-easing);
}
.control.moreHorizontal:not(.moreHorizontal:checked) + .moreHorizontal .icon,
.control.moreVertical:not(.moreVertical:checked) + .moreVertical .icon {
	animation: moreunchecked var(--ui-dpd-8) var(--ui-easing);
}
/* avoid dupes */
.control.minmax:checked + .minimize:not(.minmax),
.control.minmax:checked + .maximize:not(.maxmin),
.control.minimize:checked + .minimize:not(.minmax),
.control.maximize:checked + .maximize:not(.maxmin) {
	display: none;
}
